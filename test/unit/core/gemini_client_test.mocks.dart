// Mocks generated by Mockito 5.4.6 from annotations
// in gemini_dart/test/unit/core/gemini_client_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i5;
import 'dart:typed_data' as _i12;

import 'package:gemini_dart/src/core/auth.dart' as _i6;
import 'package:gemini_dart/src/handlers/conversation_context.dart' as _i9;
import 'package:gemini_dart/src/handlers/image_handler.dart' as _i11;
import 'package:gemini_dart/src/handlers/multimodal_handler.dart' as _i13;
import 'package:gemini_dart/src/handlers/text_handler.dart' as _i7;
import 'package:gemini_dart/src/models/content.dart' as _i10;
import 'package:gemini_dart/src/models/generation_config.dart' as _i8;
import 'package:gemini_dart/src/models/response.dart' as _i2;
import 'package:gemini_dart/src/services/http_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGeminiResponse_0 extends _i1.SmartFake
    implements _i2.GeminiResponse {
  _FakeGeminiResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpService extends _i1.Mock implements _i3.HttpService {
  MockHttpService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, dynamic>> get(
    String? endpoint, {
    Map<String, String>? queryParameters,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [endpoint],
          {
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> post(
    String? endpoint, {
    Map<String, dynamic>? body,
    Map<String, String>? queryParameters,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [endpoint],
          {
            #body: body,
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> put(
    String? endpoint, {
    Map<String, dynamic>? body,
    Map<String, String>? queryParameters,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [endpoint],
          {
            #body: body,
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> delete(
    String? endpoint, {
    Map<String, String>? queryParameters,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [endpoint],
          {
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> patch(
    String? endpoint, {
    Map<String, dynamic>? body,
    Map<String, String>? queryParameters,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [endpoint],
          {
            #body: body,
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Stream<Map<String, dynamic>> postStream(
    String? endpoint, {
    Map<String, dynamic>? body,
    Map<String, String>? queryParameters,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postStream,
          [endpoint],
          {
            #body: body,
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue: _i4.Stream<Map<String, dynamic>>.empty(),
      ) as _i4.Stream<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> uploadFile(
    String? endpoint,
    _i5.File? file, {
    String? fieldName,
    String? mimeType,
    Map<String, String>? additionalFields,
    Map<String, String>? headers,
    void Function(
      int,
      int,
    )? onProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFile,
          [
            endpoint,
            file,
          ],
          {
            #fieldName: fieldName,
            #mimeType: mimeType,
            #additionalFields: additionalFields,
            #headers: headers,
            #onProgress: onProgress,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthenticationHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationHandler extends _i1.Mock
    implements _i6.AuthenticationHandler {
  MockAuthenticationHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  void setApiKey(String? apiKey) => super.noSuchMethod(
        Invocation.method(
          #setApiKey,
          [apiKey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool validateApiKey(String? apiKey) => (super.noSuchMethod(
        Invocation.method(
          #validateApiKey,
          [apiKey],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> storeApiKey(String? apiKey) => (super.noSuchMethod(
        Invocation.method(
          #storeApiKey,
          [apiKey],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> retrieveStoredApiKey() => (super.noSuchMethod(
        Invocation.method(
          #retrieveStoredApiKey,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> clearStoredApiKey() => (super.noSuchMethod(
        Invocation.method(
          #clearStoredApiKey,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  Map<String, String> getAuthHeaders() => (super.noSuchMethod(
        Invocation.method(
          #getAuthHeaders,
          [],
        ),
        returnValue: <String, String>{},
      ) as Map<String, String>);
}

/// A class which mocks [TextHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockTextHandler extends _i1.Mock implements _i7.TextHandler {
  MockTextHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.GeminiResponse> generateContent(
    String? prompt, {
    _i8.GenerationConfig? config,
    _i9.ConversationContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateContent,
          [prompt],
          {
            #config: config,
            #context: context,
          },
        ),
        returnValue: _i4.Future<_i2.GeminiResponse>.value(_FakeGeminiResponse_0(
          this,
          Invocation.method(
            #generateContent,
            [prompt],
            {
              #config: config,
              #context: context,
            },
          ),
        )),
      ) as _i4.Future<_i2.GeminiResponse>);

  @override
  _i4.Future<_i2.GeminiResponse> generateFromContent({
    required List<_i10.Content>? contents,
    _i8.GenerationConfig? config,
    _i9.ConversationContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateFromContent,
          [],
          {
            #contents: contents,
            #config: config,
            #context: context,
          },
        ),
        returnValue: _i4.Future<_i2.GeminiResponse>.value(_FakeGeminiResponse_0(
          this,
          Invocation.method(
            #generateFromContent,
            [],
            {
              #contents: contents,
              #config: config,
              #context: context,
            },
          ),
        )),
      ) as _i4.Future<_i2.GeminiResponse>);

  @override
  _i4.Stream<_i2.GeminiResponse> generateContentStream(
    String? prompt, {
    _i8.GenerationConfig? config,
    _i9.ConversationContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateContentStream,
          [prompt],
          {
            #config: config,
            #context: context,
          },
        ),
        returnValue: _i4.Stream<_i2.GeminiResponse>.empty(),
      ) as _i4.Stream<_i2.GeminiResponse>);

  @override
  _i4.Stream<_i2.GeminiResponse> generateFromContentStream({
    required List<_i10.Content>? contents,
    _i8.GenerationConfig? config,
    _i9.ConversationContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateFromContentStream,
          [],
          {
            #contents: contents,
            #config: config,
            #context: context,
          },
        ),
        returnValue: _i4.Stream<_i2.GeminiResponse>.empty(),
      ) as _i4.Stream<_i2.GeminiResponse>);

  @override
  _i4.Future<_i2.GeminiResponse> generateWithContext(
    _i9.ConversationContext? context,
    String? prompt, {
    _i8.GenerationConfig? config,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateWithContext,
          [
            context,
            prompt,
          ],
          {#config: config},
        ),
        returnValue: _i4.Future<_i2.GeminiResponse>.value(_FakeGeminiResponse_0(
          this,
          Invocation.method(
            #generateWithContext,
            [
              context,
              prompt,
            ],
            {#config: config},
          ),
        )),
      ) as _i4.Future<_i2.GeminiResponse>);

  @override
  _i4.Stream<_i2.GeminiResponse> generateStreamWithContext(
    _i9.ConversationContext? context,
    String? prompt, {
    _i8.GenerationConfig? config,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateStreamWithContext,
          [
            context,
            prompt,
          ],
          {#config: config},
        ),
        returnValue: _i4.Stream<_i2.GeminiResponse>.empty(),
      ) as _i4.Stream<_i2.GeminiResponse>);
}

/// A class which mocks [ImageHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageHandler extends _i1.Mock implements _i11.ImageHandler {
  MockImageHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.GeminiResponse> analyzeImage(
    _i12.Uint8List? imageData,
    String? mimeType, {
    String? prompt,
    _i8.GenerationConfig? config,
    _i9.ConversationContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyzeImage,
          [
            imageData,
            mimeType,
          ],
          {
            #prompt: prompt,
            #config: config,
            #context: context,
          },
        ),
        returnValue: _i4.Future<_i2.GeminiResponse>.value(_FakeGeminiResponse_0(
          this,
          Invocation.method(
            #analyzeImage,
            [
              imageData,
              mimeType,
            ],
            {
              #prompt: prompt,
              #config: config,
              #context: context,
            },
          ),
        )),
      ) as _i4.Future<_i2.GeminiResponse>);

  @override
  _i4.Future<_i2.GeminiResponse> analyzeImages(
    List<({_i12.Uint8List data, String mimeType})>? images, {
    String? prompt,
    _i8.GenerationConfig? config,
    _i9.ConversationContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyzeImages,
          [images],
          {
            #prompt: prompt,
            #config: config,
            #context: context,
          },
        ),
        returnValue: _i4.Future<_i2.GeminiResponse>.value(_FakeGeminiResponse_0(
          this,
          Invocation.method(
            #analyzeImages,
            [images],
            {
              #prompt: prompt,
              #config: config,
              #context: context,
            },
          ),
        )),
      ) as _i4.Future<_i2.GeminiResponse>);

  @override
  _i4.Future<_i2.GeminiResponse> generateFromContent(
    List<_i10.Content>? contents, {
    _i8.GenerationConfig? config,
    _i9.ConversationContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateFromContent,
          [contents],
          {
            #config: config,
            #context: context,
          },
        ),
        returnValue: _i4.Future<_i2.GeminiResponse>.value(_FakeGeminiResponse_0(
          this,
          Invocation.method(
            #generateFromContent,
            [contents],
            {
              #config: config,
              #context: context,
            },
          ),
        )),
      ) as _i4.Future<_i2.GeminiResponse>);

  @override
  _i4.Stream<_i2.GeminiResponse> generateFromContentStream({
    required List<_i10.Content>? contents,
    _i8.GenerationConfig? config,
    _i9.ConversationContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateFromContentStream,
          [],
          {
            #contents: contents,
            #config: config,
            #context: context,
          },
        ),
        returnValue: _i4.Stream<_i2.GeminiResponse>.empty(),
      ) as _i4.Stream<_i2.GeminiResponse>);

  @override
  _i4.Future<_i2.GeminiResponse> compareImages(
    _i12.Uint8List? image1Data,
    String? image1MimeType,
    _i12.Uint8List? image2Data,
    String? image2MimeType, {
    String? prompt,
    _i8.GenerationConfig? config,
    _i9.ConversationContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #compareImages,
          [
            image1Data,
            image1MimeType,
            image2Data,
            image2MimeType,
          ],
          {
            #prompt: prompt,
            #config: config,
            #context: context,
          },
        ),
        returnValue: _i4.Future<_i2.GeminiResponse>.value(_FakeGeminiResponse_0(
          this,
          Invocation.method(
            #compareImages,
            [
              image1Data,
              image1MimeType,
              image2Data,
              image2MimeType,
            ],
            {
              #prompt: prompt,
              #config: config,
              #context: context,
            },
          ),
        )),
      ) as _i4.Future<_i2.GeminiResponse>);

  @override
  _i4.Future<_i2.GeminiResponse> extractTextFromImage(
    _i12.Uint8List? imageData,
    String? mimeType, {
    _i8.GenerationConfig? config,
    _i9.ConversationContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #extractTextFromImage,
          [
            imageData,
            mimeType,
          ],
          {
            #config: config,
            #context: context,
          },
        ),
        returnValue: _i4.Future<_i2.GeminiResponse>.value(_FakeGeminiResponse_0(
          this,
          Invocation.method(
            #extractTextFromImage,
            [
              imageData,
              mimeType,
            ],
            {
              #config: config,
              #context: context,
            },
          ),
        )),
      ) as _i4.Future<_i2.GeminiResponse>);

  @override
  _i4.Future<_i2.GeminiResponse> describeImage(
    _i12.Uint8List? imageData,
    String? mimeType, {
    String? focusArea,
    _i8.GenerationConfig? config,
    _i9.ConversationContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeImage,
          [
            imageData,
            mimeType,
          ],
          {
            #focusArea: focusArea,
            #config: config,
            #context: context,
          },
        ),
        returnValue: _i4.Future<_i2.GeminiResponse>.value(_FakeGeminiResponse_0(
          this,
          Invocation.method(
            #describeImage,
            [
              imageData,
              mimeType,
            ],
            {
              #focusArea: focusArea,
              #config: config,
              #context: context,
            },
          ),
        )),
      ) as _i4.Future<_i2.GeminiResponse>);
}

/// A class which mocks [MultiModalHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockMultiModalHandler extends _i1.Mock implements _i13.MultiModalHandler {
  MockMultiModalHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.GeminiResponse> generateContent(
    List<_i10.Content>? contents, {
    _i8.GenerationConfig? config,
    _i9.ConversationContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateContent,
          [contents],
          {
            #config: config,
            #context: context,
          },
        ),
        returnValue: _i4.Future<_i2.GeminiResponse>.value(_FakeGeminiResponse_0(
          this,
          Invocation.method(
            #generateContent,
            [contents],
            {
              #config: config,
              #context: context,
            },
          ),
        )),
      ) as _i4.Future<_i2.GeminiResponse>);

  @override
  _i4.Stream<_i2.GeminiResponse> generateContentStream(
    List<_i10.Content>? contents, {
    _i8.GenerationConfig? config,
    _i9.ConversationContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateContentStream,
          [contents],
          {
            #config: config,
            #context: context,
          },
        ),
        returnValue: _i4.Stream<_i2.GeminiResponse>.empty(),
      ) as _i4.Stream<_i2.GeminiResponse>);

  @override
  _i4.Future<_i2.GeminiResponse> createPrompt({
    String? text,
    List<({_i12.Uint8List data, String mimeType})>? images,
    List<({String fileUri, String mimeType})>? videos,
    _i8.GenerationConfig? config,
    _i9.ConversationContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPrompt,
          [],
          {
            #text: text,
            #images: images,
            #videos: videos,
            #config: config,
            #context: context,
          },
        ),
        returnValue: _i4.Future<_i2.GeminiResponse>.value(_FakeGeminiResponse_0(
          this,
          Invocation.method(
            #createPrompt,
            [],
            {
              #text: text,
              #images: images,
              #videos: videos,
              #config: config,
              #context: context,
            },
          ),
        )),
      ) as _i4.Future<_i2.GeminiResponse>);

  @override
  _i4.Future<_i2.GeminiResponse> analyzeMedia({
    required String? analysisPrompt,
    List<({_i12.Uint8List data, String mimeType})>? images,
    List<({String fileUri, String mimeType})>? videos,
    _i8.GenerationConfig? config,
    _i9.ConversationContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyzeMedia,
          [],
          {
            #analysisPrompt: analysisPrompt,
            #images: images,
            #videos: videos,
            #config: config,
            #context: context,
          },
        ),
        returnValue: _i4.Future<_i2.GeminiResponse>.value(_FakeGeminiResponse_0(
          this,
          Invocation.method(
            #analyzeMedia,
            [],
            {
              #analysisPrompt: analysisPrompt,
              #images: images,
              #videos: videos,
              #config: config,
              #context: context,
            },
          ),
        )),
      ) as _i4.Future<_i2.GeminiResponse>);

  @override
  _i4.Future<_i2.GeminiResponse> conversationWithMedia(
    _i9.ConversationContext? context, {
    String? text,
    List<({_i12.Uint8List data, String mimeType})>? images,
    List<({String fileUri, String mimeType})>? videos,
    _i8.GenerationConfig? config,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #conversationWithMedia,
          [context],
          {
            #text: text,
            #images: images,
            #videos: videos,
            #config: config,
          },
        ),
        returnValue: _i4.Future<_i2.GeminiResponse>.value(_FakeGeminiResponse_0(
          this,
          Invocation.method(
            #conversationWithMedia,
            [context],
            {
              #text: text,
              #images: images,
              #videos: videos,
              #config: config,
            },
          ),
        )),
      ) as _i4.Future<_i2.GeminiResponse>);

  @override
  Map<String, dynamic> getContentStatistics(List<_i10.Content>? contents) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContentStatistics,
          [contents],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
